archivesBaseName = "${mName.replaceAll("[^a-zA-Z]", "")}"
version = "v${mVersion}-${mcVersion}-Common"
group = mMavenGroup

repositories {
     maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }
    mavenCentral()
    exclusiveContent {
        forRepository {
            maven {
                name = "CurseForge"
                url = "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}


dependencies {
    minecraft "com.mojang:minecraft:${mcVersion}"
    mappings loom.layered() {
        parchment("org.parchmentmc.data:parchment-${parchMcVersion}:${parchVersion}")
        officialMojangMappings {
            setNameSyntheticMembers(true)
        }
    }
}

loom {
    mixin {
        // not sure if this is necessary for common...
        defaultRefmapName = "${modId}.refmap.json"
        // fix for java.lang.NoClassDefFoundError: org/objectweb/asm/tree/MethodNode
        useLegacyMixinAp = false
    }

    // this should hopeful prevent an empty run directory being generated in common during initial project setup
    runs {
        client {
            client()
            setConfigName("Common Client")
            ideConfigGenerated(false)
            runDir("../run")
        }
        server {
            server()
            setConfigName("Common Server")
            ideConfigGenerated(false)
            runDir("../run")
        }
    }
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when a value changes
    inputs.property "modDescription", mDescription
    inputs.property "resourcePackFormat", rpVer
    inputs.property "dataPackFormat", dpVer

    // replace stuff in pack.mcmeta
    filesMatching('pack.mcmeta') {
        expand(
                'modDescription': mDescription,
                "resourcePackFormat": rpVer,
                "dataPackFormat": dpVer
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${modId}-common"
            version = mVersion
            from components.java
            pom {
                name = "${mName} [Common]"
                description = "${mDescription}"
                url = "${mSourceUrl}"
                scm {
                    url = "${mSourceUrl}"
                    connection = "${mSourceUrl}".replace("https", "scm:git:git").concat(".git")
                    developerConnection = "${mSourceUrl}".replace("https://github.com/", "scm:git:git@github.com:").concat(".git")
                }
                issueManagement {
                    system = 'github'
                    url = "${mIssueUrl}"
                }
                licenses {
                    license {
                        name = "${mLicense}"
                        url = "https://spdx.org/licenses/${mLicense}.html"
                    }
                }
                developers {
                    developer {
                        id = "${mAuthor}".toLowerCase()
                        name = "${mAuthor}"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'VrglabResources'
            url "file://" + project.hasProperty('mResources') ? "${project.findProperty('mResources')}/maven" : System.getenv('local_maven')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

task copyJarToDir(type: Copy) {
    onlyIf { project.hasProperty('buildJarOutputDir') && project.hasProperty('uniqueBuildNumber') }
    if (project.findProperty('copyBuildJar').toBoolean()) {
        from remapJar
        into project.findProperty('buildJarOutputDir')
        rename { fileName -> fileName.replace("v${mVersion}", "v${mVersion}.${uniqueBuildNumber}") }
    }
}
