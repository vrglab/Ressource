apply plugin: "com.github.johnrengelman.shadow"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        configureEach {
            ideConfigGenerated(true)
            runDir("../run")
            vmArgs("-Xms1G", "-Xmx4G", "-Dmixin.debug.export=true")
        }
        client {
            client()
            setConfigName("Fabric Client ${mcVersion}")
        }
        server {
            server()
            setConfigName("Fabric Server ${mcVersion}")
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        name = "Modmuss"
        url = "https://maven.modmuss50.me/"
    }
    maven {
        name = "ladysnake"
        url = "https://maven.ladysnake.org/releases"
    }
    maven {
        name = "jamieswhiteshirt"
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
    }
}

dependencies {
    // Common Project
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // Fabric Loader
    modApi libs.fabricloader.fabric

    var versionCatalog = rootProject.extensions.getByType(VersionCatalogsExtension).named("libs")

    versionCatalog.findLibrary("modmenu.fabric").ifPresent {
        modLocalRuntime(it.get()) {
            transitive = false
        }
    }
}

tasks.withType(Jar).configureEach {
    exclude "architectury.common.json"
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = ""
    injectAccessWidener = true
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}